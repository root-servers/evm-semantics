#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

# Works regardless of where script is called from
kevm_dir="${KEVM_DIR:-$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )}"
build_dir="$kevm_dir/.build"
defn_dir="${KEVM_DEFN_DIR:-$build_dir/defn}"
lib_dir="$build_dir/local/lib"
k_release_dir="${K_RELEASE:-$kevm_dir/deps/k/k-distribution/target/release/k}"
[[ -f "${k_release_dir}/bin/kompile" ]]               \
    || ! which kompile &> /dev/null                   \
    || k_release_dir="$(dirname $(which kompile))/.."

export PATH="${defn_dir}/web3/build:$k_release_dir/lib/native/linux:$k_release_dir/lib/native/linux64:$k_release_dir/bin/:$PATH"
export LD_LIBRARY_PATH="$k_release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

export K_OPTS="${K_OPTS:--Xmx16G -Xss512m}"

KLAB_OUT="${KLAB_OUT:-$build_dir/klab}"
KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-300000}"
export KLAB_OUT

# Runners
# -------

# User Commands

run_krun() {
    krun --directory "$backend_dir"                                      \
        -cSCHEDULE="$cSCHEDULE"                   -pSCHEDULE='printf %s' \
        -cMODE="$cMODE"                           -pMODE='printf %s'     \
        -cCHAINID="#token(\"$cCHAINID\",\"Int\")" -pCHAINID='printf %s'  \
        "$run_file" "$@"
}

run_kast() {
    local output_mode

    output_mode="${1:-kore}" ; shift

    case "$run_file-$output_mode" in
        *.json-@(kast|kore)) "$kevm_dir/$output_mode-json.py" "$run_file" "$cSCHEDULE" "$cMODE" "$cCHAINID" ;;
        *)                   kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@"       ;;
    esac
}

run_prove() {
    local def_module run_dir additional_proof_args bug_report_name

    def_module="$1" ; shift
    bug_report_name="kevm-bug-$(basename "${run_file%-spec.k}")"

    additional_proof_args=()
    ! $debug      || additional_proof_args+=(--debug)
    ! $repl       || additional_proof_args+=(--debugger --debug-script kast.kscript)
    ! $bug_report || additional_proof_args+=(--haskell-backend-command "kore-exec --bug-report $bug_report_name")

    ! $debug || set -x
    kprove --directory "$backend_dir" "$run_file" --def-module "$def_module" "${additional_proof_args[@]}" "$@"
}

run_search() {
    local search_pattern
    search_pattern="$1" ; shift
    run_krun --search --pattern "$search_pattern" "$@"
}

run_web3() {
    run_file='-'

    if netcat -z "$kevm_host" "$kevm_port"; then
        fatal "Already a process listening on '$kevm_port:$kevm_host'!"
    fi

    if $debug; then
        gdb --args kevm-client --port "$kevm_port" --host "$kevm_host" "$@"
    elif $dump; then
      exec -a "$0 web3" kevm-client --dump --port "$kevm_port" --host "$kevm_host" "$@" 3>&2 2>&1 1>&3 \
          | "$0" kast --backend web3 - pretty --input kore --sort GeneratedTopCell
    else
      exec -a "$0 web3" kevm-client --port "$kevm_port" --host "$kevm_host" "$@" 2>/dev/null
    fi
}

run_web3_send() {
    local web3_method web3_params web3_file
    if [[ -f "$1" ]]; then
        web3_file="$1" ; shift
        curl -s -X POST $kevm_host:$kevm_port --data @$web3_file
    else
        web3_method="$1" ; shift
        join_args() {
            local IFS=','
            echo "$*"
        }
        web3_params="$(join_args "$@")"
        curl -s -X POST --data '{"jsonrpc": "2.0", "id": 1, "method": "'"$web3_method"'", "params": ['"$web3_params"']}' "$kevm_host":"$kevm_port"
    fi
    echo
}

run_klab() {
    local run_mode klab_log def_module omit_cells omit_labels

    run_mode="$1" ; shift
    klab_log="$(basename "${run_file%-spec.k}")"

    def_module="$1" ; shift

    omit_cells='<substate> <jumpDests> <program> <code> <callGas> <touchedAccounts> <interimStates> <callStack> <callData> <block> <txOrder> <txPending> <messages>'
    omit_labels='#mkCall________EVM #callWithCode_________EVM #create_____EVM #mkCreate_____EVM #newAddrCreate2 #finishCodeDeposit___EVM'

    "$0" "$run_mode" --backend java "$run_file" "$def_module"                           \
        --state-log --state-log-path "$KLAB_OUT/data" --state-log-id "$klab_log"        \
        --state-log-events OPEN,REACHINIT,REACHTARGET,REACHPROVED,RULE,SRULE,NODE,CLOSE \
        --output-flatten "_Map_ #And"                                                   \
        --output-omit "$omit_cells $omit_labels"                                        \
        --no-alpha-renaming --restore-original-names --no-sort-collections              \
        --output json                                                                   \
        "$@"
}

view_klab() {
    local klab_log

    klab_log="$(basename "${run_file%-spec.k}")"

    # klab often runs out of stack space when running long-running KEVM programs
    # klab debug "$klab_log"
    node --max-old-space-size=4096 --stack-size=$KLAB_NODE_STACK_SIZE $(dirname $(which klab))/../libexec/klab-debug "$klab_log"
}

# Dev Commands

run_interpret() {
    local interpreter kast output output_text output_format exit_status

    interpreter="$backend_dir/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    output_text="$(mktemp)"
    trap "rm -rf $kast $output $output_text" INT TERM EXIT
    exit_status=0
    debugger=
    output_format='kore'
    case "$backend" in
        java)    run_kast kast > "$kast"
                 output_format='kast'
                 run_file="$kast"
                 run_krun --parser 'cat' --output kast > "$output" || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format"
                 fi
                 exit "$exit_status"
                 ;;

        llvm)    run_kast kore > "$kast"
                 if $debug; then debugger="gdb --args"; fi
                 $debugger "$interpreter" "$kast" -1 "$output" "$@" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        haskell) run_kast kore > "$kast"
                 kore-exec "$backend_dir/driver-kompiled/definition.kore" --pattern "$kast" --module ETHEREUM-SIMULATION --smt none --output "$output" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        *)      fatal "Bad backend for interpreter: '$backend'"
                ;;
    esac
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: $0 run          [--backend (llvm|java|haskell)]           <pgm>  <K arg>*
               $0 interpret    [--backend (llvm)] [--debug|--no-unparse] <pgm>  <interpreter arg>*
               $0 interpret    [--backend (java|haskell)] [--no-unparse] <pgm>
               $0 kast         [--backend (llvm|java|haskell|web3)]      <pgm>  <output format> <K arg>*
               $0 prove        [--backend (java|haskell)]                <spec> <def_module> <K arg>*
               $0 search       [--backend (java|haskell)]                <pgm>  <pattern> <K arg>*
               $0 web3         [--debug|--dump]                          [--port <port>] [--host <host>]
               $0 web3-send                                              [--port <port>] [--host <host>] [<web3_method> <web3_params>|<web3_file>]
               $0 klab-run                                               <pgm>  <K arg>*
               $0 klab-prove                                             <spec> <def_module> <K arg>*
               $0 klab-view                                              <spec>

               $0 [help|--help|version|--version]

           $0 run       : Run a single EVM program
           $0 interpret : Run JSON EVM programs without K Frontend (external parser)
           $0 kast      : Parse an EVM program and output it in a supported format
           $0 prove     : Run an EVM K proof
           $0 search    : Search for a K pattern in an EVM program execution
           $0 web3      : Run version of semantics which understand Web3 RPC (**UNDER CONSTRUCTION**)
           $0 web3-send : Send message to running Web3 instance of KEVM (**UNDER CONSTRUCTION**)
           $0 klab-(run|prove) : Run program or prove spec and dump StateLogs which KLab can read
           $0 klab-view : View the statelog associated with a given program or spec

           $0 help    : Display this help message.
           $0 version : Display the versions of KEVM, K, Kore, and Z3 in use.

           Note: <pgm> is a path to a file containing an EVM program/test.
                 <spec> is a K specification to be proved.
                 <K arg> is an argument you want to pass to K.
                 <interpreter arg> is an argument you want to pass to the derived interpreter.
                 <output format> is the format for Kast to output the term in.
                 <pattern> is the configuration pattern to search for.
                 <port> is the port to listen on for Web3 JSON RPC requests.
                 <def_module> is the module to take as axioms when doing verification.
                 <web3_method> is the specific web3 method to call.
                 <web3_params> is an optional list of parameters to pass to the <web3_method>.
                 <web3_file> specifies a JSON file to feed as input into the web3 server.
                 <host> is the address of the running Web3 instance.

           klab-view: Make sure that the 'klab/bin' directory is on your PATH to use this option.
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]]; then
    notif "KEVM Version"
    git rev-parse --short HEAD
    notif "K Version"
    kompile --version
    notif "Kore Version"
    kore-exec --version
    notif "Z3 Version"
    z3 --version
    exit 0
fi

backend="llvm"
debug=false
dump=false
unparse=true
repl=false
bug_report=false
[[ ! "$run_command" == 'prove' ]] || backend='java'
[[ ! "$run_command" =~ klab*   ]] || backend='java'
[[ ! "$run_command" =~ web3*   ]] || backend='llvm'
kevm_port='8545'
kevm_host='127.0.0.1'
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --debug)              debug=true        ; shift   ;;
        --dump)               dump=true         ; shift   ;;
        --no-unparse)         unparse=false     ; shift   ;;
        --repl)               repl=true         ; shift   ;;
        --bug-report)         bug_report=true   ; shift   ;;
        --backend)            backend="$2"      ; shift 2 ;;
        --backend-dir)        backend_dir="$2"  ; shift 2 ;;
        -p|--port)            kevm_port="$2"    ; shift 2 ;;
        -h|--host|--hostname) kevm_host="$2"    ; shift 2 ;;
        *)                    args+=("$1")      ; shift   ;;
    esac
done
set -- "${args[@]}"
backend_dir="${backend_dir:-$defn_dir/$backend}"

! $repl || [[ "$backend" == haskell ]] || fatal "Option --repl only usable with --backend haskell!"

# get the run file
if [[ ! "$run_command" =~ web3* ]]; then
    run_file="$1" ; shift
    if [[ "$run_file" == '-' ]]; then
        tmp_input="$(mktemp)"
        trap "rm -rf $tmp_input" INT TERM EXIT
        cat - > "$tmp_input"
        run_file="$tmp_input"
    fi
    [[ -f "$run_file" ]] || fatal "File does not exist: $run_file"
fi

cMODE="\`${MODE:-NORMAL}\`(.KList)"
cSCHEDULE="\`${SCHEDULE:-ISTANBUL}_EVM\`(.KList)"
cCHAINID="${CHAINID:-1}"

case "$run_command-$backend" in
    run-@(java|llvm|haskell)       ) run_krun                        "$@" ;;
    kast-@(java|llvm|haskell|web3) ) run_kast                        "$@" ;;
    interpret-@(llvm|haskell|java) ) run_interpret                   "$@" ;;
    prove-@(java|haskell)          ) run_prove                       "$@" ;;
    search-@(java|haskell)         ) run_search                      "$@" ;;
    web3-@(llvm)                   ) run_web3                        "$@" ;;
    web3-send-@(llvm)              ) run_web3_send                   "$@" ;;
    klab-@(run|prove)-java         ) run_klab "${run_command#klab-}" "$@" ;;
    klab-view-java                 ) view_klab                       "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
